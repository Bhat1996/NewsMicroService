schema {
    mutation: Mutation
    query: Query
}

type Mutation{
    savedNews(news:NewsRequest):NewsResponse
    deleteNews(id:String):String
    publishNews(newsId:String):NewsResponse
    updateNews(newsRequest:NewsRequest):String
}

type  Query{
    getAllNews(newsStatus:NewsStatus):[NewsResponse]
}

input NewsRequest{
    id:String
    title: LanguageSupport
    description:LanguageSupport
    slugTitle:LanguageSupport
    newsStatus : NewsStatus
    hashTagIds:[String]
    remarks:String
    interestIds:[String]
    newsSource: String
    sourceLink:String
    countryIds:[String]
    publishAndNotify:Boolean

}

type NewsResponse{
    id:String
    arangoId:String
    title: LanguageSupportResponse
    description:LanguageSupportResponse
    slugTitle:LanguageSupportResponse
    newsStatus: NewsStatus
    hashTagIds:[String]
    remarks:String
    interestIds:[String]
    newsSource: String
    sourceLink:String
    countryIds:[String]
    publishAndNotify:Boolean
}
input LanguageSupport{
    en:String
    hn: String!
    pb: String
}

type LanguageSupportResponse{
    en:String
    hn: String
    pb: String
}

#input PaginationFilter{
#    offset : Int = 0
#    limit : Int = 10
#    order : SortingOrder = ASC
#}
#
#type PageInfo{
#    offset : Int
#    hasNext : Boolean
#    hasPrevious : Boolean
##    totalCounts : Long
#    limit : Int
#    pageNumber : Int
#    order : SortingOrder
#}
#
#enum SortingOrder{
#    ASC,
#    DESC
#}

enum NewsStatus{
    PUBLISHED,
    DRAFT,
    PUBLISHANDNOTIFY
}

enum Status{
    ACTIVE,
    INACTIVE,
    BOTH,
    DELETED
}
